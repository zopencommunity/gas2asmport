#!/bin/env bash

#
# Script to split 'check.ok' into multiple 'ok' files to make it easier to
# see differences.
#
# For the input file:
#  Extract lines that start with ' @file ', and put the line numbers
#  for each match into the 'lines' array.
#  Add the 'lastline' to the end of the lines array.
#  These entries indicate the line numbers for each diff file that we will want to create.
#   Get the relative file name from the file
#  match as a check that this is a 'standard' git diff.
#  Put the array of file names into the 'file' array. Note that there may be multiple
#  entries with the same name. Just overwrite.
#
#  Loop through the lines and create new files from the original aggregate file,
#  using the line numbers and file names from the lines and file arrays.
#

if [ $# -lt 2 ]; then
  echo "Usage: split-check <output-directory> <input-file>\n"
  echo "  split 'ok' <input-file> into a set of files, each with a suffix of 'ok' in <output-directory>\n"
  exit 0
fi

outdir=$1
shift
mkdir -p "${outdir}"

for aggregate in $@; do
  info=$(grep -n '^ @file ' "${aggregate}")
  lastline=$(wc -l "$1" | awk '{ print $1; }')
  lastline=$((lastline + 1))
  lines=$(printf "%s" "${info}" | awk -F: ' { print $1; }')
  lines=$(printf '%s\n%s\n' "${lines}" "${lastline}")

  filestr=$(printf "%s" "${info}" | awk ' { print $3; }')
  files=($filestr)

  start=''
  i=-1
  printf '%s\n' "${lines}" | while IFS= read -r end; do
    if [ -n "${start}" ]; then
      af="${files[i]}.assemble"
      taillines=$((end - start))
      headlines=$((end - 1))
      content=$(head -n "${headlines}" "${aggregate}" | tail -n "${taillines}")
      if ! printf '%s\n' "${content}" > "${outdir}/${af}"; then
        printf 'Unable to write patch file to %s.\n' "${outdir}/${af}" >&2
        exit 8
      fi
    fi
    start="${end}"
    i=$((i + 1))
  done
done
